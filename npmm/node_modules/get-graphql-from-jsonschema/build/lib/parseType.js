"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseType = void 0;
const errors_1 = require("./errors");
const handleArrayType_1 = require("./handleArrayType");
const handleObjectType_1 = require("./handleObjectType");
const handleScalarType_1 = require("./handleScalarType");
const isArrayType_1 = require("./isArrayType");
const isObjectType_1 = require("./isObjectType");
const isScalarType_1 = require("./isScalarType");
const toBreadcrumb_1 = require("./toBreadcrumb");
const parseType = function ({ path, schema, direction }) {
    if (!schema.type) {
        throw new errors_1.errors.SchemaInvalid(`Property 'type' at '${toBreadcrumb_1.toBreadcrumb(path)}' is missing.`);
    }
    const jsonTypes = [schema.type].flat();
    const graphqlTypeNames = [];
    const graphqlTypeDefinitions = [];
    jsonTypes.forEach((jsonType, index) => {
        let result;
        const subPath = [...path, `T${index}`];
        if (isScalarType_1.isScalarType({ type: jsonType })) {
            result = handleScalarType_1.handleScalarType({ type: jsonType });
        }
        else if (isArrayType_1.isArrayType({ type: jsonType })) {
            result = handleArrayType_1.handleArrayType({ path: subPath, schema, direction });
        }
        else if (isObjectType_1.isObjectType({ type: jsonType })) {
            result = handleObjectType_1.handleObjectType({ path: subPath, schema, direction });
        }
        else if (jsonType === 'null') {
            return;
        }
        else {
            throw new errors_1.errors.TypeInvalid(`Type '${jsonType}' at '${path}' is invalid.`);
        }
        graphqlTypeNames.push(result.typeName);
        graphqlTypeDefinitions.push(...result.typeDefinitions);
    });
    const graphqlTypeName = graphqlTypeNames.
        filter((name) => name.trim() !== '').
        join(' | ');
    return {
        typeName: graphqlTypeName,
        typeDefinitions: graphqlTypeDefinitions
    };
};
exports.parseType = parseType;
