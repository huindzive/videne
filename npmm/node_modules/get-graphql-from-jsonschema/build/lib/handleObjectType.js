"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleObjectType = void 0;
const errors_1 = require("./errors");
const parseSchema_1 = require("./parseSchema");
const toBreadcrumb_1 = require("./toBreadcrumb");
const toPascalCase_1 = require("./toPascalCase");
const handleObjectType = function ({ path, schema, direction }) {
    var _a;
    if (!schema.properties) {
        throw new errors_1.errors.SchemaInvalid(`Property 'properties' at '${toBreadcrumb_1.toBreadcrumb(path)}' is missing.`);
    }
    if (schema.additionalProperties) {
        throw new errors_1.errors.SchemaInvalid(`Property 'additionalProperties' at '${toBreadcrumb_1.toBreadcrumb(path)}' must not be true.`);
    }
    const graphqlTypeName = toPascalCase_1.toPascalCase(path);
    const graphqlTypeDefinitions = [];
    const lines = [];
    for (const [propertyName, propertySchema] of Object.entries(schema.properties)) {
        const isRequired = (_a = (schema.required && schema.required.includes(propertyName))) !== null && _a !== void 0 ? _a : false;
        const { typeName: propertyGraphqlTypeName, typeDefinitions: propertyGraphqlTypeDefinitions } = parseSchema_1.parseSchema({
            path: [...path, propertyName],
            schema: propertySchema,
            direction
        });
        let line = `  ${propertyName}: ${propertyGraphqlTypeName}`;
        if (isRequired) {
            line += '!\n';
        }
        else {
            line += '\n';
        }
        lines.push(line);
        graphqlTypeDefinitions.push(...propertyGraphqlTypeDefinitions);
    }
    let currentGraphqlTypeDefinition = '';
    if (direction === 'input') {
        currentGraphqlTypeDefinition += 'input';
    }
    else {
        currentGraphqlTypeDefinition += 'type';
    }
    if (lines.length > 0) {
        currentGraphqlTypeDefinition += ` ${graphqlTypeName} {\n`;
        for (const line of lines) {
            currentGraphqlTypeDefinition += line;
        }
        currentGraphqlTypeDefinition += '}';
    }
    else {
        currentGraphqlTypeDefinition += ` ${graphqlTypeName}`;
    }
    graphqlTypeDefinitions.push(currentGraphqlTypeDefinition);
    return {
        typeName: graphqlTypeName,
        typeDefinitions: graphqlTypeDefinitions
    };
};
exports.handleObjectType = handleObjectType;
